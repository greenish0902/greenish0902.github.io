{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/03-System_Program_1/index_02/",
    "result": {"data":{"site":{"siteMetadata":{"title":"🧞‍♂️ Welcome to DEV.SH !"}},"markdownRemark":{"id":"afe06c7c-bdde-5861-9d05-9165b3e80aa9","excerpt":"Mode bit CPU를 돕는 보호 장치로써의 기능을 한다. mode bit 는 두 가지 모드가 있다. 0 (모니터 모드): OS 코드 수행 (= 커널 모드, 시스템 모드) 1 (사용자 모드): 사용자 프로그램 수행 보안성을 위한 “특권명령”은 모니터 모드(…","html":"<h1>Mode bit</h1>\n<ul>\n<li>CPU를 돕는 보호 장치로써의 기능을 한다.</li>\n<li>mode bit 는 두 가지 모드가 있다.\n<ul>\n<li>0 (모니터 모드): OS 코드 수행 (= 커널 모드, 시스템 모드)</li>\n<li>1 (사용자 모드): 사용자 프로그램 수행</li>\n</ul>\n</li>\n<li>보안성을 위한 “특권명령”은 모니터 모드(0)에서만 수행 가능하다.</li>\n<li>예시:\n<ul>\n<li>사용자 프로그램 -> 운영체제: interrupt 나 execution 발생 시에는 0으로 바꾼다.</li>\n<li>운영체제에서 -> 사용자 프로그램: CPU를 넘기기 전에 1로 세팅하고 넘긴다.</li>\n</ul>\n</li>\n</ul>\n<h1>Timer</h1>\n<ul>\n<li>타이머가 0이 되면 인터럽트를 발생시킨다.\n<ul>\n<li>프로그램 -> 운영체제로 제어권을 넘겨서 특정 프로그램의 CPU의 독점을 막는다.</li>\n</ul>\n</li>\n<li>time sharing 구현에 주로 사용된다.</li>\n</ul>\n<h1>Device Controller</h1>\n<ul>\n<li>I/O 장치를 전담하는 작은 CPU\n<ul>\n<li>control register, status register</li>\n<li>local buffer (= data register)</li>\n<li>를 갖는다.</li>\n</ul>\n</li>\n<li>각각의 입출력장치는 로컬 버퍼에 접근할 수 있고</li>\n<li>CPU는 이 로컬 버퍼에 접근할 수 있다.</li>\n<li>유의\n<ul>\n<li>Device Driver: 장치 구동기로, 장치별 처리 루틴을 위한 software 이고</li>\n<li>Device Controller: 장치 통제를 위한 작은 CPU이므로 hardward 이다.</li>\n</ul>\n</li>\n</ul>\n<h1>I/O Process</h1>\n<ul>\n<li>사용자 프로그램이 입출력을 하기 위해서는 운영체제에 요청을 보내야 한다.</li>\n<li>과정: trap, 인터럽트 벡터, 인터럽트 서비스 루틴, system call</li>\n</ul>\n<ol>\n<li>trap으로 인터럽트 벡터의 특정 위치로 이동</li>\n<li>해당 위치가 가리키는 인터럽트 서비스 루틴으로 제어권 이동</li>\n<li>요청 확인 및 수행</li>\n<li>System call 다음 명령으로 제어권 옮김</li>\n</ol>\n<h1>System Call</h1>\n<ul>\n<li>사용자 프로그램이 운영체제의 서비스를 받기 위해 <strong>커널 함수를 호출</strong>하는 것</li>\n</ul>\n<h1>Interrupt</h1>\n<ul>\n<li>CPU의 제어를 넘기는 것</li>\n<li>인터럽트당한 시점의 레지스터, program counter를 저장하고 CPU의 제어를 인터럽트 처리 루틴에 넘긴다.</li>\n<li>각 인터럽트마다 처리하는 다른 일을 <strong>인터럽트 처리 루틴</strong>이라고 한다.</li>\n<li>일반적인 인터럽트는 하드웨어 인터럽트를 가리킨다,</li>\n<li>아래와 같이 분류해볼 수 있다.\n<ul>\n<li>Interrupt (Hardware Interrupt)</li>\n<li>Trap (Software Interrupt)\n<ul>\n<li>Execution: 프로그램 오류 발생</li>\n<li>System Call: 프로그램이 커널 함수를 호출</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"반효경 [운영체제] 3. System Structure & Program Execution 1(2)","date":"220211 Fri","description":"컴퓨터 시스템의 구조 - 세부 항목들: Mode bit, Timer, Device Controller, I/O Process, System Call, Interrupt"}},"previous":{"fields":{"slug":"/BOJ-node-js/BOJ-2110/"},"frontmatter":{"title":"[boj] 2110. 공유기 설치 (node.js)"}},"next":{"fields":{"slug":"/BOJ-node-js/BOJ-1253/"},"frontmatter":{"title":"[boj] 1253. 좋다 (node.js)"}}},"pageContext":{"id":"afe06c7c-bdde-5861-9d05-9165b3e80aa9","previousPostId":"92c7c159-1ec2-596f-901f-9a8002a2ec88","nextPostId":"d471a1e0-38e6-574f-b0de-5e5057bea985"}},
    "staticQueryHashes": ["230163734","2841359383"]}