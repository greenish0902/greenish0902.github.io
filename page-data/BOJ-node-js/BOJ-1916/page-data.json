{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/BOJ-node-js/BOJ-1916/",
    "result": {"data":{"site":{"siteMetadata":{"title":"🧞‍♂️ Welcome to DEV.SH !"}},"markdownRemark":{"id":"2e54ffed-7a39-5c25-bbd1-e983ac7f1977","excerpt":"daily algorithm practice 문제 요약 [boj] 1916. 최소비용 구하기 (node.js…","html":"<p><img src=\"../../../src/images/dailyAlgorithmPractice/march_22.png\" alt=\"daily algorithm practice\"></p>\n<h3>문제 요약</h3>\n<p><a href=\"https://www.acmicpc.net/problem/1916\">[boj] 1916. 최소비용 구하기 (node.js)</a></p>\n<ul>\n<li>연결된 노드의 정보와 간선의 가중치가 주어진다. (유향 그래프)</li>\n<li>출발 노드와 최종 노드가 주어질 때, 최단 거리를 출력하라</li>\n</ul>\n<h3>풀이</h3>\n<ul>\n<li>다익스트라 알고리즘을 통해 최단 거리를 출력하는 문제</li>\n<li>node.js 풀이를 위해서 우선순위 큐 클래스를 구현하고 이를 활용하여 다익스트라 알고리즘의 큐를 구현한다.</li>\n<li>거리가 짧을수록 우선순위가 높으므로 거리 정보를 우선순위 값으로 활용하였다.</li>\n<li>노드의 개수와 가중치의 범위가 N(1000) * M(100000) = 100000000이므로 최단 거리를 저장하는 배열의 기본값으로 Infinity 를 설정하고 시작했다.</li>\n</ul>\n<h4>내 풀이</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> readline <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"readline\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> rl <span class=\"token operator\">=</span> readline<span class=\"token punctuation\">.</span><span class=\"token function\">createInterface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  input<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">,</span>\n  output<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> priority <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>priority <span class=\"token operator\">=</span> priority\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PriorityQueue</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>values <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val<span class=\"token punctuation\">,</span> priority</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> priority<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">bubbleUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> first <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">let</span> last <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> last\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> first\n    <span class=\"token keyword\">let</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">sinkDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> node\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">bubbleUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">let</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> parentIdx <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">let</span> parentNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span>parentIdx<span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>priority <span class=\"token operator\">&lt;</span> parentNode<span class=\"token punctuation\">.</span>priority<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> parentNode\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span>parentIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> node\n        index <span class=\"token operator\">=</span> parentIdx\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">break</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">sinkDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">let</span> leftIdx <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n      <span class=\"token keyword\">let</span> rightIdx <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> index <span class=\"token operator\">+</span> <span class=\"token number\">2</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftIdx <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> leftIdx <span class=\"token operator\">>=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rightIdx <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> rightIdx <span class=\"token operator\">>=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> rightIdx <span class=\"token operator\">=</span> leftIdx\n      <span class=\"token keyword\">let</span> leftChild <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span>leftIdx<span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">let</span> rightChild <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span>rightIdx<span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n        leftChild<span class=\"token punctuation\">.</span>priority <span class=\"token operator\">&lt;</span> node<span class=\"token punctuation\">.</span>priority <span class=\"token operator\">&amp;&amp;</span>\n        rightChild<span class=\"token punctuation\">.</span>priority <span class=\"token operator\">&lt;</span> node<span class=\"token punctuation\">.</span>priority\n      <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftChild<span class=\"token punctuation\">.</span>priority <span class=\"token operator\">&lt;</span> rightChild<span class=\"token punctuation\">.</span>priority<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> leftChild\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span>leftIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> node\n          index <span class=\"token operator\">=</span> leftIdx\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rightChild\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span>rightIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> node\n          index <span class=\"token operator\">=</span> rightIdx\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftChild<span class=\"token punctuation\">.</span>priority <span class=\"token operator\">&lt;</span> node<span class=\"token punctuation\">.</span>priority<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> leftChild\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span>leftIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> node\n        index <span class=\"token operator\">=</span> leftIdx\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rightChild<span class=\"token punctuation\">.</span>priority <span class=\"token operator\">&lt;</span> node<span class=\"token punctuation\">.</span>priority<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rightChild\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span>rightIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> node\n        index <span class=\"token operator\">=</span> rightIdx\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">.</span>length\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">solution</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">N</span> <span class=\"token operator\">=</span> <span class=\"token function\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">M</span> <span class=\"token operator\">=</span> <span class=\"token function\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> graph <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token constant\">M</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token function\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>graph<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> graph<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> to<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> weight<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n    graph<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    graph<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">,</span> last<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">let</span> pq <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> dist <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token constant\">N</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">)</span>\n  dist<span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  pq<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">,</span> dist<span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> node <span class=\"token operator\">=</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>graph<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dist<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> node<span class=\"token punctuation\">.</span>priority<span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span>\n    <span class=\"token keyword\">let</span> nodeLen <span class=\"token operator\">=</span> graph<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>length\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nodeLen<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> currentNode <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>val\n      <span class=\"token keyword\">let</span> nextNode <span class=\"token operator\">=</span> graph<span class=\"token punctuation\">[</span>currentNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">let</span> currentDist <span class=\"token operator\">=</span> dist<span class=\"token punctuation\">[</span>nextNode<span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">let</span> weight <span class=\"token operator\">=</span> graph<span class=\"token punctuation\">[</span>currentNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dist<span class=\"token punctuation\">[</span>currentNode<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> weight <span class=\"token operator\">>=</span> currentDist<span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span>\n      dist<span class=\"token punctuation\">[</span>nextNode<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dist<span class=\"token punctuation\">[</span>currentNode<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> weight\n      pq<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>nextNode<span class=\"token punctuation\">,</span> dist<span class=\"token punctuation\">[</span>nextNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>dist<span class=\"token punctuation\">[</span>last<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">input</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> stdin<span class=\"token punctuation\">[</span>cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">let</span> stdin <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nrl<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"line\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">line</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  stdin<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"close\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"[boj] 1916. 최소비용 구하기 (node.js)","date":"220303 Thu","description":"Dijkstra, Priority Queue"}},"previous":{"fields":{"slug":"/14-Process_Synchronization_3/"},"frontmatter":{"title":"반효경 [운영체제] 14. Process Synchronization 3"}},"next":{"fields":{"slug":"/BOJ-node-js/BOJ-1759/"},"frontmatter":{"title":"[boj] 1759. 암호 만들기 (node.js)"}}},"pageContext":{"id":"2e54ffed-7a39-5c25-bbd1-e983ac7f1977","previousPostId":"940fce04-e385-59d7-b835-0fec8f91292b","nextPostId":"e54677e2-4d29-580f-8ec7-2652152ef1ba"}},
    "staticQueryHashes": ["230163734","2841359383"]}