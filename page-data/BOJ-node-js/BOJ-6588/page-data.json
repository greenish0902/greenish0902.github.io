{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/BOJ-node-js/BOJ-6588/",
    "result": {"data":{"site":{"siteMetadata":{"title":"🧞‍♂️ Welcome to DEV.SH !"}},"markdownRemark":{"id":"7914ed84-38e1-5d37-9e7f-27dabc8b99f4","excerpt":"daily algorithm practice 문제 [boj] 6588. 골드바흐의 추측 (node.js)…","html":"<p><img src=\"../../../src/images/dailyAlgorithmPractice/may_22.png\" alt=\"daily algorithm practice\"></p>\n<h3>문제</h3>\n<p><a href=\"https://www.acmicpc.net/problem/6588\">[boj] 6588. 골드바흐의 추측 (node.js)</a></p>\n<blockquote>\n<p>4보다 큰 모든 짝수는 두 홀수 소수의 합으로 나타낼 수 있다.</p>\n</blockquote>\n<ul>\n<li>위의 골드바흐의 추측에 대해, 짝수가 주어질 때 골드바흐의 추측을 검증하는 문제</li>\n</ul>\n<h3>풀이</h3>\n<ul>\n<li>에라토스테네스의 체를 먼저 구현하여 0, 1로 소수 여부를 판별하여 배열에 담아 두었다.</li>\n<li>문제에서 원하는 결과가 답이 여러 개일 경우 두 홀수의 차가 가장 큰 경우를 출력하는 것이므로,</li>\n<li>탐색 함수를 통해 (주어진 짝수 - 1) 부터 -2씩 이동하며 그 값과 그 값과 짝이 되는 수의 소수 여부를 확인한다.</li>\n</ul>\n<h3>생각</h3>\n<ul>\n<li>처음에 그럴 필요 없는 문제를 또 이분탐색 쓴다고 삽질했다. 인덱스로 접근하여 그 값을 확인할 때는, 배열의 값으로 접근할 때보다 훨씬 간단하게 풀리는 경우가 많다. 배열의 인덱스를 이용하는 건 오히려 두 번 꼬인 문제라는 걸 인식하고 제대로 풀자!</li>\n</ul>\n<h4>전체 풀이</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> readline <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"readline\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> rl <span class=\"token operator\">=</span> readline<span class=\"token punctuation\">.</span><span class=\"token function\">createInterface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  input<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">,</span>\n  output<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 에라토스테네스의 체</span>\n<span class=\"token keyword\">let</span> isPrime <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000000</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nisPrime<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">*</span> j <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isPrime<span class=\"token punctuation\">[</span>i <span class=\"token operator\">*</span> j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span>\n    isPrime<span class=\"token punctuation\">[</span>i <span class=\"token operator\">*</span> j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">solution</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> results <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token function\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n    results<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>n<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>n <span class=\"token operator\">-</span> result<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> + </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">L</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R</span><span class=\"token punctuation\">,</span> n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">L</span> <span class=\"token operator\">&lt;=</span> <span class=\"token constant\">R</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token constant\">L</span> <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token constant\">R</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isPrime<span class=\"token punctuation\">[</span><span class=\"token constant\">L</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> isPrime<span class=\"token punctuation\">[</span><span class=\"token constant\">R</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token constant\">R</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token constant\">R</span> <span class=\"token operator\">-=</span> <span class=\"token number\">2</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> line <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">input</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> stdin<span class=\"token punctuation\">[</span>line<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">let</span> stdin <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nrl<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"line\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">line</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  stdin<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"close\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"[boj] 6588. 골드바흐의 추측 (node.js)","date":"220511 Wed","description":"수학 - 골드바흐의 추측"}},"previous":{"fields":{"slug":"/BOJ-node-js/BOJ-2609/"},"frontmatter":{"title":"[boj] 2609. 최대공약수와 최소공배수 (node.js)"}},"next":{"fields":{"slug":"/BOJ-node-js/BOJ-2004/"},"frontmatter":{"title":"[boj] 2004. 조합 0의 개수 (node.js)"}}},"pageContext":{"id":"7914ed84-38e1-5d37-9e7f-27dabc8b99f4","previousPostId":"ef50d308-0179-57e0-a85b-e0a9aebacb16","nextPostId":"bfc2ce30-1ef7-5c12-b42b-d12c62b3919f"}},
    "staticQueryHashes": ["230163734","2841359383"]}