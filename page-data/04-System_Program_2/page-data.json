{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/04-System_Program_2/",
    "result": {"data":{"site":{"siteMetadata":{"title":"🧞‍♂️ Welcome to DEV.SH !"}},"markdownRemark":{"id":"1b50d2a1-cd57-5366-ad5a-3501c4c4c02d","excerpt":"…","html":"<h1>입출력</h1>\n<h2>동기식 &#x26; 비동기식 입출력</h2>\n<ul>\n<li>동기식 입출력은 입출력 작업을 완료하기까지 기다렸다 제어를 넘겨주는 방식이고,</li>\n<li>비동기식 입출력은 입출력 작업 완료를 기다리지 않고 바로 제어를 사용자 프로그램에게 넘겨준다.</li>\n<li>입출력 작업은 보통 오래걸리는 방법이기에 주로 비동기식을 활용하며, 확인을 원하는 경우 동기식을 활용한다.</li>\n<li>두 방식 모두 입출력이 완료되었다는 것은 인터럽트를 통해 알 수 있다.</li>\n</ul>\n<h3>동기식 입출력 (synchronous)</h3>\n<ul>\n<li>\n<p>입출력 작업을 완료한 후에 사용자 프로그램에 제어가 넘어간다.</p>\n</li>\n<li>\n<p>크게 두 개의 구현방법으로 나눠볼 수 있는데,</p>\n<ol>\n<li>입출력이 끝날 때까지 CPU는 아무 일도 하지 않는 방식</li>\n<li>동기식이지만 I/O 완료까지 기다리되 그 동안 CPU를 빼앗아 -> 다른 프로그램에게 주는 구현 방법 (IO장치 여러 개가 일할 수 있도록 한다.)</li>\n</ol>\n</li>\n<li>\n<p>이 두 가지 구현 방법으로 나눠 볼 수 있다.</p>\n</li>\n</ul>\n<h3>비동기식 입출력 (asynchronous)</h3>\n<ul>\n<li>입출력 작업이 끝나기를 기다리지 않고, 제어가 바로 사용자 프로그램으로 넘어간다.</li>\n</ul>\n<h2>입출력 방식</h2>\n<ul>\n<li>일반적인 입출력: 메모리 접근과 IO 접근이 별개</li>\n<li>Memory-Mapped I/O: 메모리 접근만으로 I/O 메모리 주소 접근 가능</li>\n</ul>\n<h1>저장장치의 계층구조</h1>\n<ul>\n<li>\n<p>primary: executable</p>\n<ul>\n<li>레지스터</li>\n<li>캐시메모리</li>\n<li>메인메모리</li>\n</ul>\n</li>\n<li>\n<p>secondary</p>\n<ul>\n<li>magnetic disk</li>\n<li>optical disk</li>\n<li>magnetic tape</li>\n</ul>\n</li>\n<li>\n<p>특징: speed, cost, valatility</p>\n<ul>\n<li>상위 항목일수록 빠르지만 단위공간당 가격이 비싸다.</li>\n<li>primary는 주로 휘발성 매체, secondary는 주로 비휘발성 매체로 구성</li>\n<li>primary는 CPU에 직접 접근 가능하지만 secondary는 CPU에 직접 접근할 수 없다.</li>\n<li>CPU 직접 접근이 가능하려면 byte 단위 주소가 가능해야 하지만, 하드디스크는 섹터 단위.</li>\n</ul>\n</li>\n<li>\n<p>Cashing: 더 빠른 매체(상위)로 정보를 읽어들여서 캐싱해두면 요청시에 더 빨리 읽어갈 수 있다.</p>\n<ul>\n<li>issue: 메모리 관리 측면 - 무엇을 캐싱해둘 것인가!</li>\n</ul>\n</li>\n</ul>\n<h1>프로그램의 실행</h1>\n<ul>\n<li>프로그램을 실행하면 해당 사용자 프로그램의 독자적인 메모리 주소공간 (0부터 ~ )가 생성된다.</li>\n<li>주소공간은 code, data(자료구조), stack(데이터)로 구성된다.</li>\n</ul>","frontmatter":{"title":"반효경 [운영체제] 4. System Structure & Program Execution 2","date":"220212 Sat","description":"입출력, 저장장치 계층구조"}},"previous":{"fields":{"slug":"/BOJ-1253/"},"frontmatter":{"title":"[boj] 1253. 좋다 (node.js)"}},"next":{"fields":{"slug":"/BOJ-2470/index02/"},"frontmatter":{"title":"[boj] 2470. 두 용액 (node.js)"}}},"pageContext":{"id":"1b50d2a1-cd57-5366-ad5a-3501c4c4c02d","previousPostId":"075d2699-0c82-50f7-9f95-878fda8608da","nextPostId":"0711c974-9f0c-55f2-a8f5-ee463d081e73"}},
    "staticQueryHashes": ["230163734","2841359383"]}