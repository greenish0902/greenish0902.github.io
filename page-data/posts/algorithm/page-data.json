{
    "componentChunkName": "component---src-pages-posts-algorithm-jsx",
    "path": "/posts/algorithm/",
    "result": {"data":{"site":{"siteMetadata":{"title":"🧞‍♂️ Welcome to DEV.SH !"}},"allMarkdownRemark":{"nodes":[{"excerpt":"문제 [boj] 10844. 쉬운 계단 수 (node.js) N이 주어질 때, N…","fields":{"slug":"/BOJ-10844/"},"frontmatter":{"date":"220520 Fri","title":"[boj] 10844. 쉬운 계단 수 (node.js)","description":"Dynamic Programming"}},{"excerpt":"문제 [boj] 11053. 가장 긴 증가하는 부분 수열 (node.js) 최장 증가 수열 (LIS, Longest Increasing Subsequence…","fields":{"slug":"/BOJ-11053/"},"frontmatter":{"date":"220519 Thu","title":"[boj] 11053. 가장 긴 증가하는 부분 수열 (node.js)","description":"Dynamic Programming, LIS (Longest Increasing Subsequence)"}},{"excerpt":"문제 [boj] 2004. 조합 0의 개수 (node.js) 풀이 조합은 팩토리얼로 바꿀 수 있고, 팩토리얼에서의 인수의 개수를 확인하는 문제로 바꿔 생각할 수 있다. 뒤에서부터 0의 개수는, 10 = 2 * 5 이므로 2의 인수의 개수와…","fields":{"slug":"/BOJ-2004/"},"frontmatter":{"date":"220512 Thu","title":"[boj] 2004. 조합 0의 개수 (node.js)","description":"수학 - 조합, 인수의 개수"}},{"excerpt":"문제 [boj] 6588. 골드바흐의 추측 (node.js) 4보다 큰 모든 짝수는 두 홀수 소수의 합으로 나타낼 수 있다. 위의 골드바흐의 추측에 대해, 짝수가 주어질 때 골드바흐의 추측을 검증하는 문제 풀이 에라토스테네스의 체를 먼저 구현하여…","fields":{"slug":"/BOJ-6588/"},"frontmatter":{"date":"220511 Wed","title":"[boj] 6588. 골드바흐의 추측 (node.js)","description":"수학 - 골드바흐의 추측"}},{"excerpt":"문제 [boj] 2609. 최대공약수와 최소공배수 (node.js) 풀이 유클리드 호제법의 개념을 담은 코드! 가장 간단한 양식의 코드라 복습을 위해 기록해 둔다. 유클리드 호제법 a = bq + r GCD(a, b) == GCD(b, r…","fields":{"slug":"/BOJ-2609/"},"frontmatter":{"date":"220509 Mon","title":"[boj] 2609. 최대공약수와 최소공배수 (node.js)","description":"유클리드 호제법 - GCD, LCM"}},{"excerpt":"문제 [boj] 1062. 가르침 (node.js) 풀이 너무 어렵게 푼 것 같은 감이 있다.. ㅠㅠ 크게 입력받고 전처리하는 부분, 재귀 함수, 점수 계산 함수의 세 파트로 나눌 수 있다. anta ~ tica -> 5개의 문자 ‘acint…","fields":{"slug":"/BOJ-1062/"},"frontmatter":{"date":"220504 Wed","title":"[boj] 1062. 가르침 (node.js)","description":"brute force"}},{"excerpt":"문제 요약 [boj] 17298. 오큰수 (node.js) 오큰수 (NGE, 해당 수의 오른쪽 수 중 그 수보다 크면서 가장 가까운 수)를 찾는 문제 풀이 내 첫 풀이 모든 인덱스를 순회하며 값을 확인해서 스택에 push, pop…","fields":{"slug":"/BOJ-17298/"},"frontmatter":{"date":"220430 Sat","title":"[boj] 17298. 오큰수 (node.js)","description":"Data Structure: Stack"}},{"excerpt":"문제 요약 [boj] 10820. 문자열 분석 (node.js) 내 풀이 문제의 요구조건에 따라 조건문을 활용하면 무리 없이 구현할 수 있는 간단한 문제였다. 하나씩 구현했고, N도 10…","fields":{"slug":"/BOJ-10820/"},"frontmatter":{"date":"220428 Thu","title":"[boj] 10820. 문자열 분석 (node.js)","description":"String"}},{"excerpt":"문제 요약 [boj] 17413. 단어 뒤집기 2 (node.js…","fields":{"slug":"/BOJ-17413/"},"frontmatter":{"date":"Invalid date","title":"[boj] 17413. 단어 뒤집기 2 (node.js)","description":"String"}},{"excerpt":"문제 요약 [boj] 10828. 스택 (node.js) 문제에서 원하는 결과를 출력할 수 있도록 스택을 구현하는 문제 내 풀이 핵심 코드 스택 클래스를 정의해서 풀이했다. push, pop…","fields":{"slug":"/BOJ-10828/"},"frontmatter":{"date":"220425 Mon","title":"[boj] 10828. 스택 (node.js)","description":"stack"}},{"excerpt":"문제 요약 [boj] 2309. 일곱 난쟁이 (node.js) 조건에 맞도록 완전탐색을 수행한 후, 조건에 맞는 답을 정렬하여 출력 풀이 풀이 01: rec(k) used 와 sum 배열은 둘 다 rec함수 외부에 선언하고, k…","fields":{"slug":"/BOJ-2309/"},"frontmatter":{"date":"220424 Sun","title":"[boj] 2309. 일곱 난쟁이  (node.js)","description":"brute force, 정렬"}},{"excerpt":"문제 요약 [boj] 18870. 좌표 압축 (node.js…","fields":{"slug":"/BOJ-18870/"},"frontmatter":{"date":"220423 Sat","title":"[boj] 18870. 좌표 압축  (node.js)","description":"정렬, 이분 탐색"}},{"excerpt":"문제 요약 [boj] 21608. 상어 초등학교 (node.js) 조건을 만족하도록 알고리즘을 구현하고 결과를 하나의 값으로 출력하는 문제 풀이 아래 코드는 길지만, 요구조건을 - solution…","fields":{"slug":"/BOJ-21608/"},"frontmatter":{"date":"220421 Thu","title":"[boj] 21608. 상어 초등학교 (node.js)","description":"구현"}},{"excerpt":"Logical vs. Physical Address, 주소바인딩(Address Binding), Memory-Management Unit(MMU), Dynamic Relocation, Hadware Support for Address…","fields":{"slug":"/18-Memory_Management_1/"},"frontmatter":{"date":"220415 Fri","title":"반효경 [운영체제] 18. Memory Management 1","description":""}},{"excerpt":"문제 요약 [boj] 1002. 터렛 (node.js…","fields":{"slug":"/BOJ-1002/"},"frontmatter":{"date":"220414 Thu","title":"[boj] 1002. 터렛 (node.js)","description":"수학: 원의 위치관계"}},{"excerpt":"문제 요약 [boj] 14267. 회사 문화 1 (node.js) 풀이 알고리즘만 보면 일반적인 bfs, 트리 탐색 문제다. 자료구조를 저장해둔 후, dfs…","fields":{"slug":"/BOJ-14267/"},"frontmatter":{"date":"220412 Tue","title":"[boj] 14267. 회사 문화 1 (node.js)","description":"tree: dfs"}},{"excerpt":"문제 요약 [boj] 2661. 좋은수열 (node.js) 풀이 1, 2, 3의 세 수만을 사용해서 길이가 N…","fields":{"slug":"/BOJ-2661/"},"frontmatter":{"date":"220411 Mon","title":"[boj] 2661. 좋은수열 (node.js)","description":"brute force"}},{"excerpt":"Deadlock의 처리 방법, Deadlock Avoidance, Example of Banker’s Algorithm, p1 request(1, 0, 2), Deadlock Detection and Recovery, Deadlock Ignorance…","fields":{"slug":"/17-Deadlocks_2/"},"frontmatter":{"date":"220407 Thu","title":"반효경 [운영체제] 17. Deadlocks 2","description":"Deadlock Avoidance, Banker's Algorithm, Deadlock Detection and Recovery, Ignorance"}},{"excerpt":"문제 요약 [boj] 7576. 토마토 (node.js) 풀이 분명 올바르게 코드를 짠 것 같은데 시간초과로 넘어가질 않아, Queue 를 클래스로 구현하니 시간 내에 맞았게 풀이할 수 있었다. 전형적인 bfs…","fields":{"slug":"/BOJ-7576/"},"frontmatter":{"date":"220406 Wed","title":"[boj] 7576. 토마토 (node.js)","description":"bfs + class Queue"}},{"excerpt":"문제 요약 [boj] 14501. 퇴사 (node.js) 풀이 기본 원칙 도착하는 날짜가 존재함이 확인되어야 이전 값을 더함 코드 재귀함수 ndateIdx > N 이면 다음 날짜가 존재하지 않으므로 더하지 않음, sum 리턴 ndateIdx == N…","fields":{"slug":"/BOJ-14501/"},"frontmatter":{"date":"220403 Sun","title":"[boj] 14501. 퇴사 (node.js)","description":"brute force"}},{"excerpt":"문제 요약 [boj] 15681. 트리와 쿼리 (node.js…","fields":{"slug":"/BOj-15681/"},"frontmatter":{"date":"220331 Thu","title":"[boj] 15681. 트리와 쿼리 (node.js)","description":"Tree, dfs"}},{"excerpt":"문제 요약 [boj] 2090. 조화평균 (node.js) 100을 넘지 않는 자연수 n개(최대 9)가 주어질 때, 주어진 모든 자연수에 대해서 분수 형태로 (…","fields":{"slug":"/BOJ-2090/"},"frontmatter":{"date":"220328 Mon","title":"[boj] 2090. 조화평균 (node.js)","description":"Math, Euclidean Algorithm(GCD)"}},{"excerpt":"교착상태(deadlock), The Deadlock Problem, Deadlock 발생의 4가지 조건, Resource-Allocation Graph(자원할당그래프), Deadlock Prevention, Deadlock…","fields":{"slug":"/16-Deadlock/"},"frontmatter":{"date":"220323 Wed","title":"반효경 [운영체제] 16. Deadlock 1","description":"Deadlock, Deadlock의 발생 조건, Deadlock의 처리: Prevention, Deadlock Avoidance"}},{"excerpt":"문제 요약 [boj] 1912. 연속합 (node.js) 연속합의 최댓값을 구하라. 풀이 n의 최댓값이 100,000 이므로 시간 제한 내에 풀이하기 위해서는 O(N)의 풀이가 필요하다. 일차원 배열 dp…","fields":{"slug":"/BOJ-1912/"},"frontmatter":{"date":"220321 Mon","title":"[boj] 1912. 연속합 (node.js)","description":"Dynamic Programming"}},{"excerpt":"문제 요약 [boj] 13305. 주유소 (node.js…","fields":{"slug":"/BOJ-13305/"},"frontmatter":{"date":"220318 Fri","title":"[boj] 13305. 주유소 (node.js)","description":"Greedy"}},{"excerpt":"문제 요약 [boj] 2343. 기타 레슨 (node.js) 주어진 크기 N의 배열을 순서 그대로 M…","fields":{"slug":"/BOJ-2343/"},"frontmatter":{"date":"220317 Thu","title":"[boj] 2343. 기타 레슨 (node.js)","description":"Binary Search"}},{"excerpt":"문제 요약 [boj] 14889. 스타트와 링크 (node.js) 풀이 문제 조건에 따른 팀을 구성할 수 있도록 탐색한 후, 탐색 결과를 활용해 값을 계산해주면 되는 문제다. 팀에 속하는 사람을 뽑는 경우의 수를 겹치지 않게 하기 위해 startIdx…","fields":{"slug":"/BOJ-14889/"},"frontmatter":{"date":"220316 Wed","title":"[boj] 14889. 스타트와 링크 (node.js)","description":"Brute Force"}},{"excerpt":"문제 요약 [boj] 9020. 골드바흐의 추측 (node.js) 골드바흐의 추측은 정수론 개념 중 하나로, ‘…","fields":{"slug":"/BOJ-9020/"},"frontmatter":{"date":"220316 Wed","title":"[boj] 9020. 골드바흐의 추측 (node.js)","description":"수학: 골드바흐의 추측 (짝수를 두 소수의 합으로 나타내기)"}},{"excerpt":"문제 요약 [boj] 3184. 양 (node.js) 풀이 양과 늑대의 수에 따라서 양이 모두 잡아먹히거나 늑대가 모두 달아나므로, 탐색 완료 후 그 수를 비교하면 된다. 따라서 조건에 맞게 탐색한 후 결과를 출력하도록 BFS로 구현하였다. v…","fields":{"slug":"/BOJ-3184/"},"frontmatter":{"date":"220315 Tue","title":"[boj] 3184. 양 (node.js)","description":"BFS"}},{"excerpt":"문제 요약 [boj] 9205. 맥주 마시면서 걸어가기 (node.js) 풀이 문제에서 제시한 맥주 관련 설명은 그래프의 노드 간에 연결하는 간선의 존재 여부를 판단하는 단서이다. 따라서 맨하탄 거리를 계산한 후, 맥주 20개 * 거리 5…","fields":{"slug":"/BOJ-9205/"},"frontmatter":{"date":"220314 Mon","title":"[boj] 9205. 맥주 마시면서 걸어가기 (node.js)","description":"Graph, DFS"}},{"excerpt":"문제 요약 [boj] 7569. 토마토 (node.js) 풀이 간만에 푼 BFS 문제! 최단 시간을 구해야 하므로 BFS…","fields":{"slug":"/BOJ-7569/"},"frontmatter":{"date":"220310 Thu","title":"[boj] 7569. 토마토 (node.js)","description":"BFS, class Queue in JavaScript"}},{"excerpt":"문제 요약 [boj] 2225. 합분해 (node.js) 풀이 DP로 풀이 가능한 경우의 수를 구하는 문제 모든 경우의 수를 시간 내에 구하기 위해 점화식을 세우고 풀이한다. dp[N][k]: K개의 숫자로 N을 만들 수 있는 경우의 수 dp[N][k…","fields":{"slug":"/BOJ-2225/"},"frontmatter":{"date":"220308 Tue","title":"[boj] 2225. 합분해 (node.js)","description":"Dynamic Programming"}},{"excerpt":"문제 요약 [boj] 12865. 평범한 배낭 (node.js) 풀이 dp 로 풀이하는 배낭 문제 정렬 없이, dp의 행/열로 물건의 개수, 무게를 제약으로 두고 값으로 가치를 계산 dp[i][j] = i개의 물건 (1~i…","fields":{"slug":"/BOJ-12865/"},"frontmatter":{"date":"220307 Mon","title":"[boj] 12865. 평범한 배낭 (node.js)","description":"Dynamic Programming"}},{"excerpt":"문제 요약 [boj] 11052. 카드 구매하기 (node.js) 풀이 N개의 카드를 구매하려 한다. 배열에 순서대로 1장짜리 카도, 2장짜리 카드, …, k장짜리 카드의 판매 가격 배열이 주어질 때, N…","fields":{"slug":"/BOJ-11052/"},"frontmatter":{"date":"220305 Sat","title":"[boj] 11052. 카드 구매하기 (node.js)","description":"Dynamic Programming"}},{"excerpt":"문제 요약 [boj] 1463. 1로 만들기 (node.js) 입력으로 들어오는 정수 X에 대해 가능한 연산들은 아래와 같다. (1 <= X <= 10^6) 3으로 나누어 떨어지면 -> 이 수를 3으로 나눈다 2로 나누어 떨어지면 -> 이 수를…","fields":{"slug":"/BOJ-1463/"},"frontmatter":{"date":"220304 Fri","title":"[boj] 1463. 1로 만들기 (node.js)","description":"Dynamic Programming"}},{"excerpt":"문제 요약 [boj] 1759. 암호 만들기 (node.js) C개의 서로 다른 문자들이 주어질 때, 주어진 규칙을 만족하는 L 자릿수 암호의 후보들을 출력하는 문제 풀이 Brute Force…","fields":{"slug":"/BOJ-1759/"},"frontmatter":{"date":"220303 Thu","title":"[boj] 1759. 암호 만들기 (node.js)","description":"Brute Force"}},{"excerpt":"문제 요약 [boj] 1916. 최소비용 구하기 (node.js…","fields":{"slug":"/BOJ-1916/"},"frontmatter":{"date":"220303 Thu","title":"[boj] 1916. 최소비용 구하기 (node.js)","description":"Dijkstra, Priority Queue"}},{"excerpt":"Semaphores, Implementation, Classical Problems of Syncronization, Bounded-Buffer Problem, Readers-Writers Problem, Dining-Philosophers…","fields":{"slug":"/14-Process_Synchronization_3/"},"frontmatter":{"date":"220302 Wed","title":"반효경 [운영체제] 14. Process Synchronization 3","description":"Classical Problems of Synchronization: Bounded Buffer Problem, Readers-Writers Problem, Dining-Philosophers Problem // Monitor"}},{"excerpt":"문제 요약 [boj] 3055. 탈출 (node.js) 고슼도치가 비버 굴로 탈출 가능한 최단 시간을 출력하라! 탈출 불가시 “KAKTUS” 출력 풀이 BFS: 이동 가능한 4방향에 대해 탐색 if 조건으로 불필요한 탐색 최소화 (continue…","fields":{"slug":"/BOJ-3055/"},"frontmatter":{"date":"220301 Tue","title":"[boj] 3055. 탈출 (node.js)","description":"BFS"}},{"excerpt":"반효경 [운영체제] 13. Process Synchronization 2 Semaphores, Critical Section of n Processes, Block / Wakeup Implementation, Implementation, Two…","fields":{"slug":"/13-Process_Synchronization_2/"},"frontmatter":{"date":"220228 Mon","title":"반효경 [운영체제] 13. Process Synchronization 2","description":"Semaphores, busy-waiting, block & wakeup, deadlock, starvation"}},{"excerpt":"문제 요약 [boj] 21919. 소수 최소 공배수 (node.js) 주어진 숫자들 중 소수인 수들의 최소 공배수 구하기 풀이  이다. 따라서 먼저 소수들을 구한 후, 유클리드 호제법으로 GCD 함수를 구현하고,  임을 활용하여 LCM…","fields":{"slug":"/BOJ-21919/"},"frontmatter":{"date":"220225 Fri","title":"[boj] 21919. 소수 최소 공배수 (node.js)","description":"Math: 유클리드 호제법, GCD, LCM"}},{"excerpt":"컴퓨터 시스템 데이터의 접근 일반적인 접근 데이터 저장된 위치에서 읽어와서 연산된 결과를 다시 위치에 저장(반영) 누가 먼저 읽어갔느냐에 따른 결과 변동 가능성 ⇒ Process Synchronization 문제 발생 관점 CPU…","fields":{"slug":"/12-Process_Synchronization_1/index01/"},"frontmatter":{"date":"220224 Thu","title":"반효경 [운영체제] 12. Process Synchronization 1","description":"데이터 접근, race condition, critical section"}},{"excerpt":"문제 요약 [boj] 1697. 숨바꼭질 (node.js) 주어진 두 지점 간 이동방법이 3가지로 정해져 있을 때, 시작점부터 도착점에 도달 가능한 최단 시간은? 풀이…","fields":{"slug":"/BOJ-1697/"},"frontmatter":{"date":"220224 Thu","title":"[boj] 1697. 숨바꼭질 (node.js)","description":"BFS"}},{"excerpt":"CPU-burst Time의 분포, Schedulling Algorithms, Round Robin(RR), Multilevel Queue, Multilevel Feedback Queue, Multi-Processor Scheduling, Real…","fields":{"slug":"/11-CPU_Scheduling_2/"},"frontmatter":{"date":"220223 Wed","title":"반효경 [운영체제] 11. CPU Scheduling 2","description":"CPU 스케줄링, Multilevel Queue, Algorithm Evaluation"}},{"excerpt":"문제 요약 [boj] 1012. 유기농 배추 (node.js…","fields":{"slug":"/BOJ-1012/"},"frontmatter":{"date":"220223 Wed","title":"[boj] 1012. 유기농 배추 (node.js)","description":"DFS"}},{"excerpt":"CPU and I/O Bursts in Program Execution, CPU-burst Time의 분포, CPU Scheduler & Dispatcher, Scheduling Algorithms, Scheduling Criteria, FCFS…","fields":{"slug":"/10-CPU_Scheduling_1/"},"frontmatter":{"date":"220222 Tue","title":"반효경 [운영체제] 10. CPU Scheduling 1","description":"CPU 스케줄링, 스케줄링 알고리즘"}},{"excerpt":"문제 요약 [boj] 1005. ACM Craft (node.js…","fields":{"slug":"/BOJ-1005/"},"frontmatter":{"date":"220222 Tue","title":"[boj] 1005. ACM Craft (node.js)","description":"위상 정렬 (Topological Sort)"}},{"excerpt":"문제 요약 [boj] 1389. 케빈 베이컨의 6단계 법칙 (node.js) 풀이 BFS로 각각의 거리를 계산하고 저장해준 후 최소 거리를 가지는 사람의 인덱스를 출력 ‘최단 거리’ 문제는 BFS를 활용해야 동일 depth…","fields":{"slug":"/BOJ-1389/"},"frontmatter":{"date":"220221 Mon","title":"[boj] 1389. 케빈 베이컨의 6단계 법칙 (node.js)","description":"BFS"}},{"excerpt":"프로세스 생성(Process Creation), 프로세스와 관련한 시스템콜, 프로세스 간 협력, Message Passing, Interprocess communication, CPU and I/O Bursts in Program Execution…","fields":{"slug":"/09-Process_Management_2/"},"frontmatter":{"date":"220218 Fri","title":"반효경 [운영체제] 9. Process Management 2","description":"프로세스 생성, 시스템 콜, 프로세스 간 협력"}},{"excerpt":"문제 요약 [boj] 10816. 숫자 카드 2 (node.js) 가지고 있는 숫자 카드들의 목록이 주어진다. 정수 M…","fields":{"slug":"/BOJ-10816/"},"frontmatter":{"date":"220218 Fri","title":"[boj] 10816. 숫자 카드 2 (node.js)","description":"이분 탐색 (Binary Search)"}},{"excerpt":"문제 요약 [boj] 1068. 트리 (node.js) 입력: 트리의 노드의 개수 N, 0 ~ N-1번 노드의 부모 노드의 번호, 삭제할 노드 번호가 주어진다. 출력: 리프 노드의 개수를 출력하라. 부모가 -…","fields":{"slug":"/BOJ-1068/"},"frontmatter":{"date":"220216 Wed","title":"[boj] 1068. 트리 (node.js)","description":"트리 (Tree)"}},{"excerpt":"프로세스 생성 (Creation) 프로세스의 생성: 부모 프로세스가 자식 프로세스 복제 생성 일반적으로 자원 공유하지 않음 여러 개 만들 수 있어서 트리 형태로 계층 구조를 형성 Execution 부모와 자식의 공존 자식의 종료(terminate…","fields":{"slug":"/08-Process_Management_1/"},"frontmatter":{"date":"220215 Tue","title":"반효경 [운영체제] 8. Process Management 1","description":"프로세스의 생성과 종류"}},{"excerpt":"문제 요약 [boj] 3273. 두 수의 합 (node.js) 수열의 크기와 수열, 숫자 x가 주어진다. 서로 다른 두 수의 합이 x가 되는 쌍의 개수를 구하라. 풀이 이분 탐색의 조건을 활용해서 수열의 각 원소마다 그 원소와 합했을 때 x…","fields":{"slug":"/BOJ-3273/"},"frontmatter":{"date":"220215 Tue","title":"[boj] 3273. 두 수의 합 (node.js)","description":"이분 탐색 (Binary Search)"}},{"excerpt":"복습 - 동기식 vs 비동기식 동기식 입출력 입출력 수행하는 동안 입출력을 요청한 프로세스가 입출력 끝날때까지 아무것도 하지 않고 기다려야 하면 동기식 입출력! 두 종류로 구분 CPU…","fields":{"slug":"/06_07-Process_2_3/"},"frontmatter":{"date":"220214 Mon","title":"반효경 [운영체제] 6. Process2, 7. Process3","description":"Process: 문맥, 상태, 문맥 교환, 스케줄러"}},{"excerpt":"문제 요약 [boj] 16472. 고냥이 (node.js) 숫자 N과 문자열이 주어진다. 주어진 문자열에서 최대 N 종류의 알파벳이 인식 가능할 때, 인식 가능한 문자열의 최대 길이를 찾아라 풀이 두 포인터 L, R…","fields":{"slug":"/BOJ-16472/"},"frontmatter":{"date":"220214 Mon","title":"[boj] 16472. 고냥이 (node.js)","description":"두 포인터 (Two Pointer)"}},{"excerpt":"프로세스의 개념, 프로세스의 상태(Process State), 프로세스의 개념, 프로세스 상태도, Process Control Block(PCB), 문맥교환(Context Switch), 프로세스를 스케줄링하기 위한 큐, Ready Queue…","fields":{"slug":"/05-Process_1/"},"frontmatter":{"date":"220213 Sun","title":"반효경 [운영체제] 5. Process1","description":"Process: 문맥, 상태, 문맥 교환, 스케줄러"}},{"excerpt":"문제 요약 [boj] 2470. 두 용액 (node.js) 주어진 숫자들 중 서로 다른 두 개를 조건에 맞게 출력하는 문제 조건: 합이 0이거나 0에 가장 가까운 조합 찾기 풀이 일반적으로 이분 탐색으로 조건(최소 거리 갱신)과 L, R…","fields":{"slug":"/BOJ-2470/index02/"},"frontmatter":{"date":"220213 Sun","title":"[boj] 2470. 두 용액 (node.js)","description":"두 포인터 (Two Pointer)"}},{"excerpt":"…","fields":{"slug":"/04-System_Program_2/"},"frontmatter":{"date":"220212 Sat","title":"반효경 [운영체제] 4. System Structure & Program Execution 2","description":"입출력, 저장장치 계층구조"}},{"excerpt":"문제 요약 [boj] 1253. 좋다 (node.js) 입력: N…","fields":{"slug":"/BOJ-1253/"},"frontmatter":{"date":"220212 Sat","title":"[boj] 1253. 좋다 (node.js)","description":"투 포인터 (Two Pointer)"}},{"excerpt":"Mode bit CPU를 돕는 보호 장치로써의 기능을 한다. mode bit 는 두 가지 모드가 있다. 0 (모니터 모드): OS 코드 수행 (= 커널 모드, 시스템 모드)…","fields":{"slug":"/03-System_Program_1/index_02/"},"frontmatter":{"date":"220211 Fri","title":"반효경 [운영체제] 3. System Structure & Program Execution 1(2)","description":"컴퓨터 시스템의 구조 - 세부 항목들: Mode bit, Timer, Device Controller, I/O Process, System Call, Interrupt"}},{"excerpt":"문제 요약 [boj] 2110. 공유기 설치 (node.js…","fields":{"slug":"/BOJ-2110/"},"frontmatter":{"date":"220211 Fri","title":"[boj] 2110. 공유기 설치 (node.js)","description":"이분 탐색 (Binary Search)"}},{"excerpt":"컴퓨터 시스템 크게 Host(Computer) 과 I/O(Input/Output) Device로 분류할 수 있다. Computer: CPU, Memory I/O Device: Disk(하드디스크), 키보드, 프린터, 모니터 등의 입출력장치 Host…","fields":{"slug":"/03-System_Program_1/"},"frontmatter":{"date":"220210 Thu","title":"반효경 [운영체제] 3. System Structure & Program Execution 1","description":"컴퓨터 시스템의 구조와 상호작용"}},{"excerpt":"문제 요약 BOJ 2805 나무 자르기 풀이 이분탐색 알고리즘을 구현한다. 이때 L, R을 한 칸씩 이동하기 위한 내부 조건으로 해당(mid)부터 나무를 잘랐을 때 원하는 값보다 크거나 같으면 1, 작으면 0을 반환하는 bool…","fields":{"slug":"/BOJ-2805/"},"frontmatter":{"date":"220210 Thu","title":"[boj] 2805. 나무 자르기 (node.js)","description":"이분 탐색 (Binary Search)"}},{"excerpt":"문제 요약 BOJ 1011 Fly me to the Alpha Centauri…","fields":{"slug":"/BOJ-1011/"},"frontmatter":{"date":"220209 Wed","title":"[boj] 1011. Fly me to the Alpha Centauri (node.js)","description":"daily algorithm practice"}},{"excerpt":"문제 요약 BOJ 11057 오르막 수 오르막 수는 수의 자리가 오름차순을 이루는 수를 말한다. 입력: 오르막 수의 길이 N이 주어질 때 출력: 오르막 수의 개수를 구하라 인접한 수가 같아도 오름차순으로 친다. 수는…","fields":{"slug":"/BOJ-11057/"},"frontmatter":{"date":"220208 Tue","title":"[boj] 11057. 오르막 수","description":"동적 프로그래밍 (Dynamic Programming)"}},{"excerpt":"운영체제란? 정의 협의의 운영체제는 “커널” 을 가리키며 커널: 부팅 이후로 메모리에 상주하는 부분 광의의 운영체제는 커널 + 유틸리티를 의미한다. 운영체제의 목적 주된 목적: 하드웨어, 자원의 효율적 관리 자원 CPU, 메모리, 입출력장치(I/O…","fields":{"slug":"/02-Introduction/"},"frontmatter":{"date":"220208 Tue","title":"반효경 [운영체제] 2. Introduction to Operating Systems","description":"운영체제란, 목적, 역할, 구조, 헷갈리는 용어"}},{"excerpt":"운영체제 (Operating System, OS…","fields":{"slug":"/01-Introduction/"},"frontmatter":{"date":"220208 Tue","title":"반효경 [운영체제] 1. 강의소개","description":"운영체제를 바라보는 관점, 목표, 그 역할"}},{"excerpt":"문제 요약 BOJ 194…","fields":{"slug":"/BOJ-1949/BOJ-1949/"},"frontmatter":{"date":"220208 Tue","title":"[boj] 1949. 우수 마을 (node.js)","description":"동적 프로그래밍 (Dynamic Programming)"}},{"excerpt":"문제 요약 BOJ 2579 계단 오르기 입력: 계단의 총 개수와 각 계단을 밟으면 얻을 수 있는 점수가 주어진다. 출력: 얻을 수 있는 최대 점수는? 한 번에 한 계단씩 또는 두 계단씩만 오를 수 있다. 시작 게단을 제외하고…","fields":{"slug":"/BOJ-2579/BOJ-2579/"},"frontmatter":{"date":"220207 Mon","title":"[boj] 2579. 계단 오르기 (node.js)","description":"동적 프로그래밍 (Dynamic Programming)"}},{"excerpt":"문제 요약 BOJ 9095 1, 2, 3 더하기 입력: 테스트 케이스의 개수와 정수가 주어진다. 출력: 1, 2,…","fields":{"slug":"/BOJ-9095/BOJ-9095/"},"frontmatter":{"date":"220206 Sun","title":"[boj] 9095. 1, 2, 3 더하기 (node.js)","description":"동적 프로그래밍 (Dynamic Programming)"}},{"excerpt":"문제 요약 BOJ 2470 줄 세우기 입력: N개의 숫자가 주어진다. 출력: 주어진 숫자들 중 합했을 때 0에 가장 가까운 수를 만드는 서로 다른 두 수를 출력하라. 풀이 이분 탐색의 입력값으로 주어진 수에 반대 부호를 붙여 합이…","fields":{"slug":"/BOJ-2470/"},"frontmatter":{"date":"220205 Sat","title":"[boj] 2470. 줄 세우기 (node.js)","description":"이분 탐색 (Binary Search)"}},{"excerpt":"문제 요약 입력: A, B 집합을 구성하는 각각의 원소들이 주어질 때 조건: A가 B보다 큰 출력: (A, B) 원소의 조합의 개수를 출력 풀이 접근 B보다 큰 A의 원소의 개수를 for문을 돌면서 세면 된다. 이때 B배열을 정렬 완료된 상태에서 A…","fields":{"slug":"/BOJ-7795/boj-7795/"},"frontmatter":{"date":"220128 Fri","title":"[boj] 7795. 먹을 것인가 먹힐 것인가 (node.js)","description":"이분 탐색(Binary Search)"}}]}},"pageContext":{}},
    "staticQueryHashes": ["230163734","2841359383"]}