{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/08-Process_Management/",
    "result": {"data":{"site":{"siteMetadata":{"title":"🧞‍♂️ Welcome to DEV.SH !"}},"markdownRemark":{"id":"51c0d141-fead-51da-a11f-f55318f1fc22","excerpt":"프로세스 생성 (Creation) 프로세스의 생성: 부모 프로세스가 자식 프로세스 복제 생성 일반적으로 자원 공유하지 않음 여러 개 만들 수 있어서 트리 형태로 계층 구조를 형성 수행: 부모와 자식의 공존, 자식의 종료(terminate)까지 부모가 기다리는(wait…","html":"<h1>프로세스 생성 (Creation)</h1>\n<ul>\n<li>프로세스의 생성: 부모 프로세스가 자식 프로세스 <strong>복제 생성</strong></li>\n<li>일반적으로 자원 공유하지 않음</li>\n<li>여러 개 만들 수 있어서 트리 형태로 계층 구조를 형성</li>\n<li>수행: 부모와 자식의 공존, 자식의 종료(terminate)까지 부모가 기다리는(wait) 모델</li>\n</ul>\n<h2>복제생성</h2>\n<ul>\n<li>자식이 부모의 주소공간, 자원 등을 복사</li>\n<li>두 단계로 나눠볼 수 있음\n<ol>\n<li>fork 복제 단계</li>\n<li>exec 를 덮어 씌우는 단계</li>\n</ol>\n</li>\n<li>두 단계는 독립적이며, fork, exec는 모두 시스템 콜로써 운영체제가 이 시스템 콜을 통해 복제해주는 개념</li>\n</ul>\n<h1>프로세스의 종료</h1>\n<ul>\n<li>exit 시스템 콜을 통해 종료</li>\n<li>방법\n<ul>\n<li>자식이 부모에게 wait 시스템 콜, 데이터를 보냄</li>\n<li>항상 자식이 먼저 종료되어야 함</li>\n</ul>\n</li>\n<li>분류\n<ul>\n<li>exit 시스템 콜: 자발적 종료</li>\n<li>abort: 강제종료\n<ul>\n<li>abort 수행의 예시\n<ul>\n<li>자원의 할당치를 넘어선 요청을 한 경우</li>\n<li>자식 프로세스에게 일을 시킬 필요가 없는 경우</li>\n<li>부모 프로세스가 종료되는 경우; 자식이 먼저 종료되어야 하므로</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"[KOCW] 운영체제 (반효경, 2014) - 8. Process Management 1","date":"February 15, 2022","description":"프로세스의 생성과 종류"}},"previous":{"fields":{"slug":"/BOJ-3273/"},"frontmatter":{"title":"[boj] 3273. 두 수의 합 (node.js)"}},"next":null},"pageContext":{"id":"51c0d141-fead-51da-a11f-f55318f1fc22","previousPostId":"059702d2-7564-5b45-a728-b0353859c728","nextPostId":null}},
    "staticQueryHashes": ["230163734","2841359383"]}