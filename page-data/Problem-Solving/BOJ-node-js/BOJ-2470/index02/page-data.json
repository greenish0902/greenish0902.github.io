{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/Problem-Solving/BOJ-node-js/BOJ-2470/index02/",
    "result": {"data":{"site":{"siteMetadata":{"title":"🧞‍♂️ Welcome to DEV.SH !"}},"markdownRemark":{"id":"93950800-9c90-5bfe-a509-eea22c8afa94","excerpt":"daily algorithm practice 문제 요약 [boj] 2470. 두 용액 (node.js) 주어진 숫자들 중 서로 다른 두 개를 조건에 맞게 출력하는 문제 조건: 합이 0이거나 0에 가장 가까운 조합 찾기 풀이 일반적으로 이분 탐색으로 조건(최소 거리 갱신)과 L, R…","html":"<p><img src=\"../../../src/images/dailyAlgorithmPractice/feb_22.png\" alt=\"daily algorithm practice\"></p>\n<h3>문제 요약</h3>\n<p><a href=\"https://www.acmicpc.net/problem/2470\">[boj] 2470. 두 용액 (node.js)</a></p>\n<ul>\n<li>주어진 숫자들 중 서로 다른 두 개를 조건에 맞게 출력하는 문제</li>\n<li>조건: 합이 0이거나 0에 가장 가까운 조합 찾기</li>\n</ul>\n<h3>풀이</h3>\n<ul>\n<li>일반적으로 <strong>이분 탐색</strong>으로 조건(최소 거리 갱신)과 L, R을 통해 풀이했던 2470번 문제를</li>\n<li>또 다른 풀이법인 <strong>두 포인터</strong>를 활용해 풀이하였다.</li>\n</ul>\n<h4>내 풀이</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> readline <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"readline\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> rl <span class=\"token operator\">=</span> readline<span class=\"token punctuation\">.</span><span class=\"token function\">createInterface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  input<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">,</span>\n  output<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">input</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> stdin<span class=\"token punctuation\">[</span>cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">let</span> stdin <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nrl<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"line\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">line</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  stdin<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"close\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">N</span> <span class=\"token operator\">=</span> <span class=\"token function\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token function\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> <span class=\"token constant\">L</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">R</span> <span class=\"token operator\">=</span> <span class=\"token constant\">N</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">Infinity</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  arr<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">L</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">R</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token constant\">L</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> arr<span class=\"token punctuation\">[</span><span class=\"token constant\">R</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> sum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      sum <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span>\n      result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span><span class=\"token constant\">L</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span><span class=\"token constant\">R</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n    temp <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token constant\">L</span><span class=\"token operator\">++</span> <span class=\"token operator\">:</span> <span class=\"token constant\">R</span><span class=\"token operator\">--</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span>\n  <span class=\"token punctuation\">}</span>\n  result<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>합이 0이거나 그에 가장 가까운 경우를 출력해야 하므로, <code class=\"language-text\">arr[L] + arr[R]</code>을 매번 확인하여 L, R을 갱신해주었다.</li>\n<li>문제 알고리즘 구현도 중요하지만 <code class=\"language-text\">let sum = Infinity;</code> 부분을 실수하여 여러 번 다시 풀었다. 문제의 sum은 두 수의 합이니 최댓값 * 2, 즉 Infinity 로 설정해 두는 것이 안전하다.</li>\n</ul>","frontmatter":{"title":"[boj] 2470. 두 용액 (node.js)","date":"220213 Sun","description":"두 포인터 (Two Pointer)"}},"previous":{"fields":{"slug":"/Operating-System/04-System_Program_2/"},"frontmatter":{"title":"반효경 [운영체제] 4. System Structure & Program Execution 2"}},"next":{"fields":{"slug":"/Operating-System/05-Process_1/"},"frontmatter":{"title":"반효경 [운영체제] 5. Process1"}}},"pageContext":{"id":"93950800-9c90-5bfe-a509-eea22c8afa94","previousPostId":"1b50d2a1-cd57-5366-ad5a-3501c4c4c02d","nextPostId":"f71028fc-1d3d-59f5-8d1c-e193bb49aec6"}},
    "staticQueryHashes": ["230163734","2841359383"]}