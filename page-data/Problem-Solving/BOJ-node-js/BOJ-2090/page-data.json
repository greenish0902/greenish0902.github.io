{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/Problem-Solving/BOJ-node-js/BOJ-2090/",
    "result": {"data":{"site":{"siteMetadata":{"title":"🧞‍♂️ Welcome to DEV.SH !"}},"markdownRemark":{"id":"2dfcd4ca-d0bc-56a2-9db1-7824bc425fbe","excerpt":"daily algorithm practice 문제 요약 [boj] 2090. 조화평균 (node.js) 100을 넘지 않는 자연수 n개(최대 9)가 주어질 때, 주어진 모든 자연수에 대해서 분수 형태로 (…","html":"<p><img src=\"../../../src/images/dailyAlgorithmPractice/march_22.png\" alt=\"daily algorithm practice\"></p>\n<h3>문제 요약</h3>\n<p><a href=\"https://www.acmicpc.net/problem/2156\">[boj] 2090. 조화평균 (node.js)</a></p>\n<ul>\n<li>100을 넘지 않는 자연수 n개(최대 9)가 주어질 때,</li>\n<li>주어진 모든 자연수에 대해서\n<ul>\n<li>분수 형태로 (1 / 자연수) 의 값을 모두 더한 뒤</li>\n<li>분모와 분자를 바꾼 결과값을 구하라.</li>\n</ul>\n</li>\n<li>이때 표현 가능한 답의 형태 중 기약분수 형태로 출력</li>\n</ul>\n<h3>풀이</h3>\n<ul>\n<li>문제 풀이의 단계를 두 단계로 나눠볼 수 있다.\n<ul>\n<li>(1) 주어진 숫자들에 대해 (1 / 자연수) 형태의 총 합을 구하고</li>\n<li>(2) 구한 합의 역수를 기약분수 형태로 만든다.</li>\n</ul>\n</li>\n<li>(1) 번 단계에서 총 합을 구할 때 분모, 분자를 각각 합과 곱을 이용헤 구할 수 있고,</li>\n<li>(2) 번 단계에서 기약분수 형태로 만들기 위해 (1)에서 구한 합과 곱의 최대공약수를 유클리드 호제법을 이용해 구한다.\n<ul>\n<li>유클리드 호제법\n<ul>\n<li>a = bq + r\n<ul>\n<li><code class=\"language-text\">gcd(a, b) == gcd(b, r) == ... == gcd(b, 0) == b</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4>내 풀이</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> readline <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"readline\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> rl <span class=\"token operator\">=</span> readline<span class=\"token punctuation\">.</span><span class=\"token function\">createInterface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  input<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">,</span>\n  output<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">solution</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token function\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>BigInt<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> mul <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sum<span class=\"token punctuation\">,</span> elem</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">%</span> elem <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> elem <span class=\"token operator\">%</span> sum <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">></span> elem<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> sum\n      <span class=\"token keyword\">return</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> sum <span class=\"token operator\">*</span> elem\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1n</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sum<span class=\"token punctuation\">,</span> elem</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> sum <span class=\"token operator\">+</span> mul <span class=\"token operator\">/</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0n</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> gcd <span class=\"token operator\">=</span> <span class=\"token function\">getGCD</span><span class=\"token punctuation\">(</span>mul<span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>mul <span class=\"token operator\">/</span> gcd <span class=\"token operator\">+</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> sum <span class=\"token operator\">/</span> gcd<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">getGCD</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> x\n    <span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> y\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">=</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">=</span> x<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> r <span class=\"token operator\">=</span> a <span class=\"token operator\">%</span> b\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">==</span> <span class=\"token number\">0n</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> b\n    <span class=\"token keyword\">return</span> <span class=\"token function\">getGCD</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> _line <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">input</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> stdin<span class=\"token punctuation\">[</span>_line<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">let</span> stdin <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nrl<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"line\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">line</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  stdin<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"close\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"[boj] 2090. 조화평균 (node.js)","date":"220328 Mon","description":"Math, Euclidean Algorithm(GCD)"}},"previous":{"fields":{"slug":"/Operating-System/16-Deadlock/"},"frontmatter":{"title":"반효경 [운영체제] 16. Deadlock 1"}},"next":{"fields":{"slug":"/Problem-Solving/BOJ-node-js/BOj-15681/"},"frontmatter":{"title":"[boj] 15681. 트리와 쿼리 (node.js)"}}},"pageContext":{"id":"2dfcd4ca-d0bc-56a2-9db1-7824bc425fbe","previousPostId":"2cfc8700-036e-51cc-bdc1-d2da69a37cbf","nextPostId":"95a5fe9b-f6a1-52bf-a124-8e0a699b25a3"}},
    "staticQueryHashes": ["230163734","2841359383"]}