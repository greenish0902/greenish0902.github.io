{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/08-Process_Management_1/",
    "result": {"data":{"site":{"siteMetadata":{"title":"🧞‍♂️ Welcome to DEV.SH !"}},"markdownRemark":{"id":"e1edadbc-835a-50e3-b778-0ebad2449cbb","excerpt":"프로세스 생성 (Creation) 프로세스의 생성: 부모 프로세스가 자식 프로세스 복제 생성 일반적으로 자원 공유하지 않음 여러 개 만들 수 있어서 트리 형태로 계층 구조를 형성 Execution 부모와 자식의 공존 자식의 종료(terminate)까지 부모가 기다리는(wait…","html":"<h1>프로세스 생성 (Creation)</h1>\n<ul>\n<li>프로세스의 생성: 부모 프로세스가 자식 프로세스 <strong>복제 생성</strong></li>\n<li>일반적으로 자원 공유하지 않음</li>\n<li>여러 개 만들 수 있어서 트리 형태로 <strong>계층 구조</strong>를 형성</li>\n<li><strong>Execution</strong>\n<ul>\n<li>부모와 자식의 공존</li>\n<li>자식의 종료(terminate)까지 부모가 기다리는(wait) 모델</li>\n</ul>\n</li>\n</ul>\n<h2>복제생성</h2>\n<ul>\n<li>자식이 부모의 주소공간, 자원 등을 복사</li>\n<li>두 단계로 나눠볼 수 있음\n<ul>\n<li>\n<ol>\n<li>fork: 복제 단계</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>exec: 덮어 씌우는 단계</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>두 단계는 독립적이며, fork, exec는 모두 시스템 콜로써 운영체제가 이 시스템 콜을 통해 복제해주는 개념</li>\n</ul>\n<h1>프로세스의 종료</h1>\n<ul>\n<li>exit 시스템 콜을 통해 프로세스를 종료함</li>\n<li><strong>방법</strong>\n<ul>\n<li>자식이 부모에게 wait 시스템 콜, 데이터를 보냄</li>\n<li>항상 자식이 먼저 종료되어야 함</li>\n</ul>\n</li>\n<li><strong>분류</strong>\n<ul>\n<li>exit 시스템 콜: 자발적 종료</li>\n<li>abort: 강제종료 - abort(강제종료) 되는 경우 - 자원의 할당치를 넘어선 요청을 한 경우 - 자식 프로세스에게 일을 시킬 필요가 없는 경우 - 부모 프로세스가 종료되는 경우; 자식이 먼저 종료되어야 하므로 abort 된다.\n**</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"반효경 [운영체제] 8. Process Management 1","date":"220215 Tue","description":"프로세스의 생성과 종류"}},"previous":{"fields":{"slug":"/BOJ-node-js/BOJ-3273/"},"frontmatter":{"title":"[boj] 3273. 두 수의 합 (node.js)"}},"next":{"fields":{"slug":"/BOJ-node-js/BOJ-1068/"},"frontmatter":{"title":"[boj] 1068. 트리 (node.js)"}}},"pageContext":{"id":"e1edadbc-835a-50e3-b778-0ebad2449cbb","previousPostId":"9155fe28-2c73-5403-b341-ddd5675693ab","nextPostId":"ac983146-9660-5237-8323-178b4c6beec1"}},
    "staticQueryHashes": ["230163734","2841359383"]}