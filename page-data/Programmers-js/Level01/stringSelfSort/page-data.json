{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/Programmers-js/Level01/stringSelfSort/",
    "result": {"data":{"site":{"siteMetadata":{"title":"🧞‍♂️ Welcome to DEV.SH !"}},"markdownRemark":{"id":"daf0bb65-dcb0-5da8-9ac9-0ce1f55ba179","excerpt":"daily algorithm practice 문제 https://programmers.co.kr/learn/courses/30/lessons/12915 간단한 정렬 문제 풀이 첫 풀이 sort 메서드를 사용할 때, 내부에서 오름차순 / 내림차순 정렬 여부를 정의하기 위해 1 또는 -…","html":"<p><img src=\"../../../src/images/dailyAlgorithmPractice/june_22.png\" alt=\"daily algorithm practice\"></p>\n<h1>문제</h1>\n<p><a href=\"https://programmers.co.kr/learn/courses/30/lessons/12915\">https://programmers.co.kr/learn/courses/30/lessons/12915</a></p>\n<ul>\n<li>간단한 정렬 문제</li>\n</ul>\n<h1>풀이</h1>\n<h3>첫 풀이</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">strings<span class=\"token punctuation\">,</span> n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> b<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>sort 메서드를 사용할 때, 내부에서 오름차순 / 내림차순 정렬 여부를 정의하기 위해 1 또는 -1을 반환하여 내장 메서드를 직접 커스텀할 수 있다.</li>\n<li>이를 그동안 수동적으로만 구현했는데, localeCompare 메서드를 오늘 처음 알게 되었다.</li>\n</ul>\n<h1>String.prototype.localeCompare</h1>\n<ul>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\">String.prototype.localeCompare</a></li>\n<li>String 객체의 내장 메서드로, 정렬 순서에서 앞에 오는지, 뒤에 오는지 그 여부를 반환하는 메서드이다.</li>\n<li>따라서, 이 메서드를 활용해서 정렬 순서에서 매번 헷갈리는 -1, 1을 처리할 수 있다!</li>\n</ul>\n<h3>수정한 풀이</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">strings<span class=\"token punctuation\">,</span> n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">localeCompare</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"[프로그래머스 1단계] 문자열 내 마음대로 정렬하기 (javascript)","date":"220607 Tue","description":"String.prototype.localeCompare"}},"previous":{"fields":{"slug":"/Programmers-js/Level01/caesarCode/"},"frontmatter":{"title":"[프로그래머스 1단계] 시저 암호 (javascript)"}},"next":{"fields":{"slug":"/BOJ-node-js/BOJ-1475/"},"frontmatter":{"title":"1475. 방 번호 (node.js)"}}},"pageContext":{"id":"daf0bb65-dcb0-5da8-9ac9-0ce1f55ba179","previousPostId":"abf6966e-de5d-522c-b9ca-8900d97a0595","nextPostId":"bab65074-5f0d-55b4-8326-4afc60eb7c2d"}},
    "staticQueryHashes": ["230163734","2841359383"]}