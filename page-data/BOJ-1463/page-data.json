{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/BOJ-1463/",
    "result": {"data":{"site":{"siteMetadata":{"title":"🧞‍♂️ Welcome to DEV.SH !"}},"markdownRemark":{"id":"0123f851-8214-5138-a8e0-fadb56f6013c","excerpt":"daily algorithm practice 문제 요약 [boj] 1463. 1로 만들기 (node.js) 입력으로 들어오는 정수 X에 대해 가능한 연산들은 아래와 같다. (1 <= X <= 10^6) 3으로 나누어 떨어지면 -> 이 수를 3으로 나눈다…","html":"<p><img src=\"../../../src/images/dailyAlgorithmPractice/march_22.png\" alt=\"daily algorithm practice\"></p>\n<h3>문제 요약</h3>\n<p><a href=\"https://www.acmicpc.net/problem/1463\">[boj] 1463. 1로 만들기 (node.js)</a></p>\n<ul>\n<li>\n<p>입력으로 들어오는 정수 X에 대해 가능한 연산들은 아래와 같다. (1 &#x3C;= X &#x3C;= 10^6)</p>\n<ul>\n<li>3으로 나누어 떨어지면 -> 이 수를 3으로 나눈다</li>\n<li>2로 나누어 떨어지면 -> 이 수를 2로 나눈다</li>\n<li>1을 뺀다</li>\n</ul>\n</li>\n<li>\n<p>연산을 활용해 주어진 정수 X를 1로 만들 수 있는 최소 횟수는?</p>\n</li>\n</ul>\n<h3>풀이</h3>\n<ul>\n<li>시간 제한이 0.15초인 동적 프로그래밍 문제다.</li>\n<li>입력 정수 X의 범위가 주어졌으므로 (1 &#x3C;= X &#x3C;= 10^6) 미리 dp 배열을 채워둔 후 입력값에 대한 결과를 출력해주면 된다.</li>\n<li>X를 1로 만드는 최단 경로를 파악하는 문제와 같으므로, 동적 프로그래밍으로 풀기 위해 거꾸로 생각하면 1부터 X를 만드는 문제다. 따라서 낮은 수부터 dp 배열을 채운다.</li>\n<li>점화식은 해당 조건을 만족할 때마다 값을 이전 횟수 + 1로 갱신시키도록 하며,</li>\n<li>조건을 만족한 이후에도 다음 조건에서 더 짧은 거리를 가질 수 있으므로 각각의 조건을 독립적으로 둔다. (if - if - )</li>\n</ul>\n<h4>내 풀이</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> readline <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"readline\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> rl <span class=\"token operator\">=</span> readline<span class=\"token punctuation\">.</span><span class=\"token function\">createInterface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">input</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">solution</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> dp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">X</span> <span class=\"token operator\">=</span> <span class=\"token function\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span><span class=\"token constant\">X</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>n <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>n <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n        dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>n <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n      dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      n<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> line <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">input</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> stdin<span class=\"token punctuation\">[</span>line<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">let</span> stdin <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nrl<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"line\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">line</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  stdin<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"close\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"[boj] 1463. 1로 만들기 (node.js)","date":"March 04, 2022","description":"Dynamic Programming"}},"previous":{"fields":{"slug":"/BOJ-1759/"},"frontmatter":{"title":"[boj] 1759. 암호 만들기 (node.js)"}},"next":{"fields":{"slug":"/BOJ-11052/"},"frontmatter":{"title":"[boj] 11052. 카드 구매하기 (node.js)"}}},"pageContext":{"id":"0123f851-8214-5138-a8e0-fadb56f6013c","previousPostId":"5b21e9b3-d842-542e-9080-dd2d124110ba","nextPostId":"53403066-7bb7-511c-b09e-c9c5da4f03af"}},
    "staticQueryHashes": ["230163734","2841359383"]}